{"ast":null,"code":"import _slicedToArray from \"/home/tadeu/JSProjects/PI/FluxoDeRestaurante/frontend/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/tadeu/JSProjects/PI/FluxoDeRestaurante/frontend/web/src/pages/orders/index.js\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport HomeBar from \"../../components/homeBar\";\nimport { Modal } from 'react-bootstrap';\nimport useForm from \"react-hook-form\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles.css\";\nexport default function Orders() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        dishs = _useState2[0],\n        setDishs = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        classifications = _useState4[0],\n        setClassifications = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        category = _useState6[0],\n        setCategory = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        dish = _useState8[0],\n        setDish = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        show = _useState10[0],\n        setShow = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        ingredients = _useState12[0],\n        setIngredients = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        extra = _useState14[0],\n        setExtra = _useState14[1];\n\n  const _useForm = useForm(),\n        handleSubmit = _useForm.handleSubmit,\n        register = _useForm.register,\n        errors = _useForm.errors;\n\n  const onSubmit = data => {\n    for (let prop in data) {\n      if (data[prop] === false) {\n        delete data[prop];\n      }\n    }\n\n    data = JSON.parse(Object.values(data));\n    console.log(data);\n  };\n\n  function handleClose() {\n    setShow(false);\n  }\n\n  function handleShow(item) {\n    setDish(item);\n    setIngredients(item.ingredients);\n    setShow(true);\n  }\n\n  useEffect(() => {\n    const arr = JSON.parse(localStorage.getItem(\"dishs\"));\n    setDishs(arr);\n    setClassifications(JSON.parse(localStorage.getItem(\"classification\")));\n    let variable = [];\n\n    function resolveThis(element, index, array) {\n      if (element.classification.classification === \"Extra\") {\n        variable.push(element);\n      }\n    }\n\n    arr.forEach(resolveThis);\n    setExtra(variable);\n  }, []);\n  const navClassifications = useMemo(() => {\n    return React.createElement(\"div\", {\n      id: \"navClass\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, classifications.map(item => {\n      if (item.section === \"dish\") {\n        return React.createElement(\"header\", {\n          key: item._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: () => setCategory(item.classification),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, item.classification));\n      }\n    }));\n  }, [classifications]);\n  const listDish = useMemo(() => {\n    if (category === \"\") {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Selecione uma categoria\");\n    } else {\n      return React.createElement(\"div\", {\n        id: \"listDish\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, dishs.map(item => {\n        if (item.classification.classification === category) {\n          return React.createElement(\"header\", {\n            key: item._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, React.createElement(\"button\", {\n            onClick: () => handleShow(item),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, item.name));\n        }\n      }));\n    }\n  }, [category]);\n  const modal = React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, dish.name)), React.createElement(Modal.Body, {\n    className: \"options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Selecione os Ingredientes que deseja retirar\", React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, ingredients.map(item => React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    key: item._id,\n    type: \"checkbox\",\n    name: item.name,\n    value: JSON.stringify(item),\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: item.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, item.name))))), React.createElement(Modal.Body, {\n    className: \"options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Selecione os extras que deseja adicionar:\", React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, extra.map(item => React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    key: item._id,\n    type: \"checkbox\",\n    name: item.name,\n    value: JSON.stringify(item),\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: item.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, item.name))))), React.createElement(Modal.Body, {\n    className: \"options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"ps\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Observa\\xE7\\xF5es\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    name: \"ps\",\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Close\"), React.createElement(\"button\", {\n    variant: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Save Changes\"))));\n  return React.createElement(React.Fragment, null, React.createElement(HomeBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"containerOrders\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"alingOrders\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, navClassifications, listDish)), modal);\n}","map":{"version":3,"sources":["/home/tadeu/JSProjects/PI/FluxoDeRestaurante/frontend/web/src/pages/orders/index.js"],"names":["React","useEffect","useState","useMemo","NavBar","HomeBar","Modal","useForm","Orders","dishs","setDishs","classifications","setClassifications","category","setCategory","dish","setDish","show","setShow","ingredients","setIngredients","extra","setExtra","handleSubmit","register","errors","onSubmit","data","prop","JSON","parse","Object","values","console","log","handleClose","handleShow","item","arr","localStorage","getItem","variable","resolveThis","element","index","array","classification","push","forEach","navClassifications","map","section","_id","listDish","name","modal","stringify"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useMemo} from \"react\";\nimport NavBar from \"../../components/navBar\";\nimport HomeBar from \"../../components/homeBar\";\nimport { Modal } from 'react-bootstrap';\nimport useForm from \"react-hook-form\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles.css\"\n\n\n\n\nexport default function Orders() {\n  const [dishs, setDishs] = useState([]);\n  const [classifications, setClassifications] = useState([]);\n  const [category, setCategory] = useState(\"\");\n  const [dish, setDish] = useState(\"\")\n  const [show, setShow] = useState(false);\n  const [ingredients, setIngredients] = useState([])\n  const [extra, setExtra] = useState([]);\n  const { handleSubmit, register, errors } = useForm();\n\n  const onSubmit = data => {\n    for (let prop in data) {\n      if (data[prop] === false) {\n        delete data[prop];\n      }\n    }\n    data =JSON.parse(Object.values(data));\n\n    console.log(data);\n  }\n\n  function handleClose(){\n    setShow(false);\n  }\n function handleShow(item){\n   setDish(item)\n   setIngredients(item.ingredients)\n   setShow(true);\n  }\n\n  useEffect(()=>{\n    const arr = JSON.parse(localStorage.getItem(\"dishs\"))\n    setDishs(arr);\n    setClassifications(JSON.parse(localStorage.getItem(\"classification\")));\n    let variable = []\n    function resolveThis(element, index, array){\n    if(element.classification.classification === \"Extra\"){\n      variable.push(element)\n    }\n  }\n\n  arr.forEach(resolveThis)\n  setExtra(variable)\n  },[])\n\n  const navClassifications = useMemo(() => {\n    return(\n      <div id=\"navClass\">\n      {classifications.map(item => {\n        if(item.section === \"dish\"){\n          return(\n            <header key={item._id}>\n              <button onClick={() => setCategory(item.classification)}>\n                {item.classification}\n              </button>\n            </header>\n          )\n        }\n      })}\n\n     </div>\n    )\n\n  }, [classifications])\n\n  const listDish = useMemo(() => {\n    if(category === \"\"){\n      return <h1>Selecione uma categoria</h1>\n    }else{\n      return(\n        <div id=\"listDish\">\n          {dishs.map(item => {\n            if(item.classification.classification === category){\n              return(\n                <header key={item._id}>\n                  <button onClick={() => handleShow(item)}>\n                    {item.name}\n                  </button>\n                </header>\n              )\n            }\n          })}\n        </div>\n      )\n    }\n  },[category])\n\n\n\n  const modal = (\n      <Modal show={show} onHide={handleClose}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Modal.Header closeButton>\n            <Modal.Title>{dish.name}</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body className=\"options\">\n            Selecione os Ingredientes que deseja retirar\n            <div>\n            {ingredients.map(item => (\n            <>\n              <input\n                key={item._id}\n                type=\"checkbox\"\n                name={item.name}\n                value={JSON.stringify(item)}\n                ref={register}\n              />\n              <label htmlFor={item.name}>{item.name}</label>\n            </>\n          ))}\n          </div>\n          </Modal.Body>\n          <Modal.Body className=\"options\">\n            Selecione os extras que deseja adicionar:\n            <div>\n            {extra.map(item => (\n            <>\n              <input\n                key={item._id}\n                type=\"checkbox\"\n                name={item.name}\n                value={JSON.stringify(item)}\n                ref={register}\n              />\n              <label htmlFor={item.name}>{item.name}</label>\n            </>\n          ))}\n          </div>\n          </Modal.Body>\n          <Modal.Body className=\"options\">\n            <label htmlFor=\"ps\">Observações</label><br/>\n            <textarea name=\"ps\" ref={register} />\n          </Modal.Body>\n          <Modal.Footer>\n            <button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </button>\n            <button variant=\"primary\" type=\"submit\">\n              Save Changes\n            </button>\n          </Modal.Footer>\n        </form>\n      </Modal>\n  )\n\n  return (\n    <>\n      <HomeBar />\n      <div id=\"containerOrders\">\n        <NavBar />\n        <div id=\"alingOrders\">\n        {navClassifications}\n        {listDish}\n        </div>\n      </div>\n      {modal}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}